"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"
"                               .vimrc                          
"
"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  set nocompatible               " be iMproved
  filetype off                   " required!


"%%%%%%%%%%%%%%%%%%%%%%%%%   SET VARIABLES   %%%%%%%%%%%%%%%%%%%%%%%%%%%% 
  "Change leader key
    let mapleader = ","


  "Miscellaneous variables to set
    set laststatus=2    "always show the status line
    set t_Co=256        "set colors to 256


    set number          "show line number on side
    set mousehide       "hide mouse cursor while typing
    set showmode        "display the current mode
    set cursorline      "highlight the current line
    set hlsearch        "highlight search patterns
    set visualbell      "no sounds
    set autoindent      
    set smartindent
    set ignorecase      "ignore case when search query is all lower-case
    set smartcase       "switch to case sensitive searching if a capital
                        "letter is present
    set gdefault        "makes search/replace global by default
    set backspace=2     "make backspace able to go over end of lines
    set encoding=utf-8  "make encoding be unicode

  "Code folding stuff
    set foldmethod=indent   "fold based on indent
    set foldnestmax=10      "deepest fold is 10 levels
    set nofoldenable        "dont fold by default
    set foldlevel=1         "this is just what i use

  "Tabs and indenting
    set expandtab       "make all tabs into spaces
    set shiftwidth=2    "when indenting with >> and <<, make it
                        "2 spaces
    set softtabstop=2   "when hitting tab in insert mode, it'll be
                        "2 spaces
    set tabstop=2       "will display all tabs in test as 2 spaces
    set preserveindent  "keep same indent as the previous line when
                        "making a new line

  "Wrapping and text width options
    set wrap
    set textwidth=74
    set formatoptions=qrn1
    set colorcolumn=74

  "Make a horizontal line on the current line if in insert mode
    augroup insert_mode
      autocmd!
      autocmd InsertEnter * set cul
      autocmd InsertLeave * set nocul
    augroup END

"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   VUNDLE   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  set rtp+=~/.vim/bundle/vundle/
  call vundle#rc() " let Vundle manage Vundle " required! 
  Bundle 'gmarik/vundle'

  " My Bundles here:
    Bundle 'tpope/vim-fugitive'
    Bundle 'tpope/vim-surround'
    Bundle 'tpope/vim-unimpaired'
    Bundle 'Lokaltog/vim-easymotion'
    Bundle 'scrooloose/nerdtree'
    Bundle 'bling/vim-airline'
    Bundle 'vim-scripts/tComment'

    Bundle "MarcWeber/vim-addon-mw-utils"
    Bundle "tomtom/tlib_vim"
    Bundle "snipmate-snippets"
    Bundle "garbas/vim-snipmate"

  " Other repos
    Bundle 'https://github.com/terryma/vim-multiple-cursors.git'

    "Bundle 'stacruz/sparkup', {'rtp': 'vim/'}
    "Bundle 'tpope/vim-rails.git'

  " vim-scripts repos
    "Bundle 'L9'
    "Bundle 'FuzzyFinder'

  " git repos on your local machine (ie. when wrking on yr own plugin)
    "Bundle 'file:///Users/gmarik/path/to/plugin'

  filetype plugin indent on     " required!


"%%%%%%%%%%%%%%%%%%%%   PLUGIN MAPPING AND CONFIG   %%%%%%%%%%%%%%%%%%%%% 
  "EasyMotion Config:
    let g:EasyMotion_leader_key = ";"


  "Fugitive commands
    nnoremap <leader>ga :Git<space>commit<space>--amend<cr>
    nnoremap <leader>gr :Gread<cr>
    nnoremap <leader>gw :Gwrite<cr>
    nnoremap <leader>gs :Gstatus<cr>
    nnoremap <leader>gl :Glog<cr>
    nnoremap <leader>gc :Gcommit -m ""<left>
    nnoremap <leader>gd :Gdiff<cr>
    nmap <leader>dp dp
    vnoremap <leader>dp :diffput<cr>:diffupdate<cr>
    nmap <leader>du :diffupdate<cr>
    nnoremap <leader>gh :Gedit<space>HEAD<cr>
    nnoremap <leader>ge :Gedit<cr>

  "Command-t commands
    nnoremap <leader>t :CommandTFlush<cr>:CommandT<cr>

  "NERDTree
    map <leader>n :NERDTreeToggle<CR>B

  "make vim-surround use lowercase s instead of capital
    vmap s S

  "open up php SnipMate snippets file (alter snippets)
    nnoremap <leader>as :tab new<cr>:e ~/.vim/after/snippets/php.snippets<cr>

  "tComment stuff
    "Press leader+c to comment instead of ctrl+_ ctrl+_
      map <leader>c <c-_><c-_>


"%%%%%%%%%%%%%%%%%%%%%%%%%%   COLOR SCHEMA   %%%%%%%%%%%%%%%%%%%%%%%%%%%% 
  syntax enable
  set background=dark
  colorscheme solarized
  " let g:solarized_termolors=256 "For some reason, when this is
    " uncommented, sourcing the vimrc file while vim is running will make
    " the colors all screwy


"%%%%%%%%%%%%%%%%%%%%%%%%%%%   FUNCTIONS   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  " Use Q to intelligently close a window 
  " (if there are multiple windows into the same buffer) or kill the
  " buffer entirely if it's the last window looking into that buffer
  function! CloseWindowOrKillBuffer()
    let number_of_windows_to_this_buffer = len(filter(range(1, winnr('$')), "winbufnr(v:val) == bufnr('%')"))

    " We should never bdelete a nerd tree
    if matchstr(expand("%"), 'NERD') == 'NERD'
      wincmd c
      return
    endif

    if number_of_windows_to_this_buffer > 1
      wincmd c
    else
      bdelete
    endif
  endfunction


"%%%%%%%%%%%%%%%%%%%%%%%%%%%%   KEY MAPS   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  "Set leader key to comma (,)
  :let mapleader = ","

  "Set regular backspace during insert mode
  set backspace=indent,eol,start

  "Tab stuff
    "Switch between tabs using th and tj
      nnoremap tk  :tabnext<CR>
      nnoremap tj  :tabprev<CR>
    "Go to first and last tabs with th and tl
      nnoremap th  :tabfirst<CR>
      nnoremap tl  :tablast<CR>
    "Edit a tab with tt
      nnoremap tt  :tabedit<Space>
    "New tab with tn
      nnoremap tn  :tabnew<Space>
    "Move a tab to a different position in the tab list at the top
      nnoremap tm  :tabm<Space>
    "Close a tab with td
      nnoremap td  :tabclose<CR>

  "Switch between windows in the same tab
    nnoremap <silent> <C-h> <C-w>h
    nnoremap <silent> <C-j> <C-w>j
    nnoremap <silent> <C-l> <C-w>l
    nnoremap <silent> <C-k> <C-w>k

  "save time by pressing space instead of colon
    nmap <space> :

  "make ctrl backspace delete the entire word when in insert mode
    inoremap <C-BS> <C-W>

  "make 'kj' do the equivalent of escape
    :inoremap kj <Esc>
    :cnoremap kj <Esc>

  "make j and k keys go up normally instead of to the previous line number
    nnoremap j gj
    nnoremap k gk

  "make <leader>v re-highlight the last thing you just highlighted
    nnoremap <leader>v V`]

  "open up .vimrc with <leader>av (think: alter vimrc)
    nnoremap <leader>av :tab new<cr>:e $MYVIMRC<cr>

  "source .vimrc with <leader>sv (think: source vimrc)
    nnoremap <leader>sv :source<Space>$MYVIMRC<cr>

  "make the default regex type to be Perl regex
    nnoremap / /\v
    vnoremap ? ?\v

  "get rid of search results
    nnoremap <leader><space> :noh<cr>   

  "make tab go to the corresponding parens or brackets
    nnoremap <leader><tab> %
    vnoremap <leader><tab> %

  "insert a -> arrow with <C-l>
    inoremap <C-l> ->

  "insert a => hash rocket <C-k>
    inoremap <C-k> =><Space>

  "insert an erb <% %> tag (with no output) using <C-e>
    inoremap <C-e> <%<space>%><left><left><left> 

  "insert an erb <%= %> tag (with output) using <C-r>
    inoremap <C-r> <%=<space>%><left><left><left> 

  "make the current word UPPERCASE with <C-c>
    inoremap <C-c> <Esc>viWUEa
    nnoremap <C-c> viWUE
    vnoremap <C-c> U`>
    vnoremap U <nop> "training to get me to stop using the old way

  "insert a padding space on the inside of the selected () with <leader>
  "is
    nnoremap <leader>is vi(<Esc>a<Space><Esc>`<i<Space><Esc>h%
    vnoremap <leader>is <Esc>vi(<Esc>a<Space><Esc>`<i<Space><Esc>h%

  "delete a padding space on the inside of the selected ()
    nnoremap <leader>ds vi(<Esc>x`<xh%
    vnoremap <leader>ds <Esc>vi(<Esc>x`<xh%
    
  "Use Q to intelligently close a window 
    nnoremap <silent> Q :call CloseWindowOrKillBuffer()<CR>
    
  "Use <leader>p to toggle paste.  When paste is set, then pasting from
  "the system clipboard will have the right format
    nnoremap <leader>p :set paste!<cr>
    vnoremap <leader>p :set paste!<cr>

  "This is a test string here (although it may not seem) or behave (like it)
  "This {can be} considered a [test] string {too}

  "Operator for "in next ___" (___ can be (, ), {, }, [, ], ', or " )
    onoremap in( :<c-u>normal! f(vi(<cr>
    onoremap in) :<c-u>normal! f(vi(<cr>
    onoremap in{ :<c-u>normal! f{vi{<cr>
    onoremap in} :<c-u>normal! f{vi{<cr>
    onoremap in[ :<c-u>normal! f[vi[<cr>
    onoremap in] :<c-u>normal! f[vi[<cr>
    onoremap in' :<c-u>normal! f'lvi'<cr>
    onoremap in" :<c-u>normal! f"lvi"<cr>

  "in last ___
    onoremap il( :<c-u>normal! F)vi(<cr>
    onoremap il) :<c-u>normal! F)vi(<cr>
    onoremap il{ :<c-u>normal! F}vi{<cr>
    onoremap il} :<c-u>normal! F}vi{<cr>
    onoremap il[ :<c-u>normal! F]vi[<cr>
    onoremap il] :<c-u>normal! F]vi[<cr>
    onoremap il' :<c-u>normal! F'hvi'<cr>
    onoremap il" :<c-u>normal! F"hvi"<cr>

  "around next ___
    onoremap an( :<c-u>normal! f(va(<cr>
    onoremap an) :<c-u>normal! f(va(<cr>
    onoremap an{ :<c-u>normal! f{va{<cr>
    onoremap an} :<c-u>normal! f{va{<cr>
    onoremap an[ :<c-u>normal! f[va[<cr>
    onoremap an] :<c-u>normal! f[va[<cr>
    onoremap an' :<c-u>normal! f'lva'<cr>
    onoremap an" :<c-u>normal! f"lva"<cr>

  "around last ___
    onoremap al( :<c-u>normal! F)va(<cr>
    onoremap al) :<c-u>normal! F)va(<cr>
    onoremap al{ :<c-u>normal! F}va{<cr>
    onoremap al} :<c-u>normal! F}va{<cr>
    onoremap al[ :<c-u>normal! F]va[<cr>
    onoremap al] :<c-u>normal! F]va[<cr>
    onoremap al' :<c-u>normal! F'hva'<cr>
    onoremap al" :<c-u>normal! F"hva"<cr>


"%%%%%%%%%%%%%%%%%%%%%%%%%    AUTOCOMMANDS    %%%%%%%%%%%%%%%%%%%%%%%%%%%%
  " PHP autocommands
    augroup filetype_php
      autocmd!
      "make the currently typed word into a variable with <C-v>
        autocmd FileType php inoremap <buffer> <C-v> <Esc>bi$<Esc>ea
        
      "insert $this with <C-t> (when in a PHP file)
        autocmd FileType php inoremap <C-t> $this
    augroup END


  " RUBY autocommands
    augroup filetype_ruby
      autocmd!
      "make the currently typed word into a variable with <C-v>
        autocmd FileType ruby inoremap <buffer> <C-v> }<Esc>bi#{<Esc>ea

      "in ruby, make the currently typed word into an attribute (@ in
      "front)
        autocmd FileType ruby inoremap <buffer> <C-b> <Esc>bi@<Esc>ea
    augroup END
