"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"
"                               .vimrc                          
"
"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  set nocompatible               " be iMproved
  filetype off                   " required!


"%%%%%%%%%%%%%%%%%%%%%%%%%   SET VARIABLES   %%%%%%%%%%%%%%%%%%%%%%%%%%%% 
  "Change leader key
    let mapleader = "\<Space>"

  "Miscellaneous variables to set
    set laststatus=2    "always show the status line
    set t_Co=256        "set colors to 256

    set number          "show line number on side
    set rnu             "make the line numbers be relative to cursor
    set mousehide       "hide mouse cursor while typing
    set showmode        "display the current mode
    set cursorline      "highlight the current line
    set hlsearch        "highlight search patterns
    set visualbell      "no sounds
    set ignorecase        "ignore case when search query is all lower-case
    set smartcase         "switch to case sensitive searching if a capital
                          "letter is present
    set gdefault          "makes search/replace global by default
    set backspace=2       "make backspace able to go over end of lines
    set encoding=utf-8    "make encoding be unicode
    set diffopt=vertical  "make vim diff vertical when using fugitive
    set guifont=Consolas:h14  "set font in gvim (and macvim) to Consolas
                              "size 14

  "Code folding stuff
    set foldmethod=indent   "fold based on indent
    set foldnestmax=10      "deepest fold is 10 levels
    set nofoldenable        "dont fold by default
    set foldlevel=1         "this is just what i use

  "Tabs and indenting
    set tabstop=2       "will display all tabs in test as 2 spaces
    set softtabstop=2   "make the indentation be the same as tabstop
    set shiftwidth=2    "when indenting with >> and <<, make it
                        "2 spaces
    set expandtab       "make all tabs into spaces
    set autoindent      
    set smartindent
    " set preserveindent  "keep same indent as the previous line when
                        "making a new line

  "Wrapping and text width options
    set wrap
    set textwidth=74
    set formatoptions=qrn1
    set colorcolumn=74

  "Make a horizontal line on the current line if in insert mode
    augroup insert_mode
      autocmd!
      autocmd InsertEnter * set cul
      autocmd InsertLeave * set nocul
    augroup END

"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   VUNDLE   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  " set rtp+=~/.vim/bundle/vundle/
  set runtimepath+=~/.vim/bundle/neobundle.vim/

  call neobundle#begin(expand('~/.vim/bundle/'))
  " Let NeoBundle manage NeoBundle
  " Required:
  NeoBundleFetch 'Shougo/neobundle.vim'

  "call vundle#rc() " let Vundle manage Vundle - required! 
  " NeoBundle 'gmarik/vundle'

  " Git integration with fugitive
  NeoBundle 'tpope/vim-fugitive'

  " Autocompletion
  NeoBundle 'Valloric/YouCompleteMe'

  NeoBundle 'ervandew/supertab'

  " Allow easy movement between vim splits and tmux panes
  NeoBundle 'christoomey/vim-tmux-navigator'

  " Fuzzy finding for files
  NeoBundle 'kien/ctrlp.vim'

  "Easily surround words with quotes, brackets, etc.
  NeoBundle 'tpope/vim-surround'

  "Switch between buffers easier
  NeoBundle 'tpope/vim-unimpaired'

  "Move around easier
  NeoBundle 'Lokaltog/vim-easymotion'

  "File navigation
  NeoBundle 'scrooloose/nerdtree'

  "Status line
  NeoBundle 'bling/vim-airline'

  "Comment code easier
  NeoBundle 'vim-scripts/tComment'

  "Coffeescript integration and syntax highlighting
  NeoBundle 'kchmck/vim-coffee-script'

  " NeoBundle 'Shougo/neocomplcache.vim'
  " NeoBundle 'Shougo/neosnippet'
  " NeoBundle 'Shougo/neosnippet-snippets'

  NeoBundle 'SirVer/ultisnips'
  NeoBundle 'honza/vim-snippets'

  NeoBundle 'tpope/vim-endwise' "automatically put end after blocks in ruby

  
  " NeoBundle "MarcWeber/vim-addon-mw-utils"
  " Bundle "tomtom/tlib_vim"
  " " Bundle "nipmate-snippets"
  "
  " "Use ack to search files from Vim
  NeoBundle 'mileszs/ack.vim'

  "Multiple cursors like in Sublime Text
  NeoBundle 'https://github.com/terryma/vim-multiple-cursors.git'

  "Run rspec tests from inside vim
  NeoBundle 'thoughtbot/vim-rspec'

  "Send rspec commands through tmux
  NeoBundle 'jgdavey/tslime.vim'

  "Sparkup for fast html writing
  NeoBundle 'rstacruz/sparkup', {'rtp': 'vim/'}

  "Ruby shortcuts and key bindings
  NeoBundle "vim-ruby/vim-ruby"

  "Ruby on Rails shortcuts and whatnot
  NeoBundle 'tpope/vim-rails.git'

  "Brightscript syntax highlighting
  NeoBundle 'chooh/brightscript.vim'

  "make ruby methods and blocks into text objects
    " NeoBundle 'nelstrom/vim-textobj-rubyblock'

  " vim-scripts repos
    "Bundle 'L9'

  " git repos on your local machine (ie. when wrking on yr own plugin)
    "Bundle 'file:///Users/gmarik/path/to/plugin'
  call neobundle#end()

  filetype plugin indent on     " required!

   " If there are uninstalled bundles found on startup,
   " this will conveniently prompt you to install them.
   NeoBundleCheck

"%%%%%%%%%%%%%%%%%%%%   PLUGIN MAPPING AND CONFIG   %%%%%%%%%%%%%%%%%%%%% 
  "Fugitive commands
    nnoremap <leader>ga :Git<space>commit<space>--amend<cr>
    nnoremap <leader>gr :Gread<cr>
    nnoremap <leader>gw :Gwrite<cr>
    nnoremap <leader>gs :Gstatus<cr>
    nnoremap <leader>gl :Glog<cr>
    nnoremap <leader>gc :Gcommit -m ""<left>
    nnoremap <leader>gd :Gdiff<cr>
    nmap <leader>dp dp
    vnoremap <leader>dp :diffput<cr>:diffupdate<cr>
    nmap <leader>du :diffupdate<cr>
    nnoremap <leader>gh :Gedit<space>HEAD<cr>
    nnoremap <leader>ge :Gedit<cr>

  "ctrl-p commands
    nnoremap <leader>f :CtrlPClearCache<cr>:CtrlP .<cr>

  "NERDTree
    map <leader>n :NERDTreeToggle<CR>B

  "make vim-surround use lowercase s instead of capital
    vmap s S

  "tComment stuff
    "Press leader+c to comment instead of ctrl+_ ctrl+_
      map <leader>c <c-_><c-_>

  "ack.vim stuff
    "call Ack-grep
      nnoremap <leader>ag :Ack<space>

  "Neocomplcache stuff
    " Disable AutoComplPop.
    let g:acp_enableAtStartup = 0
    " Use neocomplcache.
    let g:neocomplcache_enable_at_startup = 1
    " Use smartcase.
    let g:neocomplcache_enable_smart_case = 1
    " Set minimum syntax keyword length.
    let g:neocomplcache_min_syntax_length = 2
    let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*' 

  " Ultisnips and YouCompleteMe stuff
    " Make YouCompleteMe work properly on tab
      let g:ycm_key_list_select_completion = ['<C-TAB>', '<Down>']
      let g:ycm_key_list_previous_completion = ['<C-S-TAB>', '<Up>']
      let g:SuperTabDefaultCompletionType = '<C-Tab>'

    " Use tab/shift-tab to move to next trigger in Ultisnips
     let g:UltiSnipsExpandTrigger="<tab>"
     let g:UltiSnipsJumpForwardTrigger="<c-l>"
     let g:UltiSnipsJumpBackwardTrigger="<c-h>"

  "Send rspec commands through tslime to tmux
    let g:rspec_command = 'call Send_to_Tmux("rspec --drb {spec}\n")'
    map <Leader>rf :call RunCurrentSpecFile()<CR>
    map <Leader>rn :call RunNearestSpec()<CR>
    map <Leader>rl :call RunLastSpec()<CR>
    map <Leader>ra :call RunAllSpecs()<CR>

  "Neosnippet stuff
    "use the currently selected snippet by pressing tab
    " imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    "     \ "\<Plug>(neosnippet_expand_or_jump)"
    "     \: pumvisible() ? "\<C-n>" : "\<TAB>"
    " smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    "     \ "\<Plug>(neosnippet_expand_or_jump)"
    "     \: "\<TAB>"


  "Rails.vim shortcuts
    noremap <leader>rc :Econtroller<CR>
    noremap <leader>rv :Eview<CR>
    noremap <leader>rj :Ejavascript<CR>
    noremap <leader>rs :Estylesheet<CR>
    vnoremap <leader>rx :Rextract 

"%%%%%%%%%%%%%%%%%%%%%%%%%%   COLOR SCHEMA   %%%%%%%%%%%%%%%%%%%%%%%%%%%% 
  syntax enable
  set background=dark
  let g:solarized_termolors=256 "For some reason, when this is
    " uncommented, sourcing the vimrc file while vim is running will make
    " the colors all screwy
  colorscheme solarized

"%%%%%%%%%%%%%%%%%%%%%%%%%%%   FUNCTIONS   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  " Use Q to intelligently close a window 
  " (if there are multiple windows into the same buffer) or kill the
  " buffer entirely if it's the last window looking into that buffer
  function! CloseWindowOrKillBuffer()
    let number_of_windows_to_this_buffer = len(filter(range(1, winnr('$')), "winbufnr(v:val) == bufnr('%')"))

    " We should never bdelete a nerd tree
    if matchstr(expand("%"), 'NERD') == 'NERD'
      wincmd c
      return
    endif

    if number_of_windows_to_this_buffer > 1
      wincmd c
    else
      bdelete
    endif
  endfunction


"%%%%%%%%%%%%%%%%%%%%%%%%%%%%   KEY MAPS   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  "Set regular backspace during insert mode
  set backspace=indent,eol,start

  "Tab stuff
    "Switch between tabs using th and tj
      nnoremap tk  :tabnext<CR>
      nnoremap tj  :tabprev<CR>
    "Go to first and last tabs with th and tl
      nnoremap th  :tabfirst<CR>
      nnoremap tl  :tablast<CR>
    "Edit a tab with tt
      nnoremap tt  :tabedit<Space>
    "New tab with tn
      nnoremap tn  :tabnew<Space>
    "Move a tab to a different position in the tab list at the top
      nnoremap tm  :tabm<Space>
    "Close a tab with td
      nnoremap td  :tabclose<CR>

  "Save quicker with <leader>w - saves all buffers
    nnoremap <leader>w :wa<CR>

  "Switch between windows in the same tab
    nnoremap <silent> <C-h> <C-w>h
    nnoremap <silent> <C-j> <C-w>j
    nnoremap <silent> <C-l> <C-w>l
    nnoremap <silent> <C-k> <C-w>k

  "make ctrl backspace delete the entire word when in insert mode
    inoremap <C-BS> <C-W>

  "make 'kj' do the equivalent of escape
    :inoremap kj <Esc>
    :cnoremap kj <Esc>

  "make j and k keys go up normally instead of to the previous line number
    nnoremap j gj
    nnoremap k gk

  "make <leader>v re-highlight the last thing you just highlighted
    nnoremap <leader>v V`]

  "open up .vimrc with <leader>av (think: alter vimrc)
    nnoremap <leader>av :tab new<cr>:e $MYVIMRC<cr>

  "source .vimrc with <leader>sv (think: source vimrc)
    nnoremap <leader>sv :source<Space>$MYVIMRC<cr>

  "make the default regex type to be Perl regex
    nnoremap / /\v
    nnoremap ? ?\v

  "leader md will call the bash mkdir command
    nnoremap <leader>md :!mkdir 

  "leader mv will call the bash mv command
    nnoremap <leader>mv :!mv 

  "leader rm will call the bash command rm 
    nnoremap <leader>rm :!rm<space>

  "get rid of search results
    nnoremap <leader>, :noh<cr>   

  "make tab go to the corresponding parens or brackets
    nnoremap <leader><tab> %
    vnoremap <leader><tab> %

  "insert a => hash rocket <C-k>
    inoremap <C-k> =><Space>

  "insert an erb <%= %> tag (with output) using <C-r>
    inoremap <C-t> <%=<space>%><left><left><left> 

  "make a vertical split with <leader>vv
    nnoremap <leader>vv :vsp<cr>

  "make a horizontal split with <leader>vs
    nnoremap <leader>vs :sp<cr>

  "make the current word UPPERCASE with <C-c>
    inoremap <C-c> <Esc>viWUEa
    nnoremap <C-c> viWUE
    vnoremap <C-c> U`>
    vnoremap U <nop> "training to get me to stop using the old way

  "change dir to ~/Projects/Andradas-portfolio-site/website-code (think
  "'c'hange to 'w'ebsite directory)
    nnoremap <leader>cw :cd ~/Projects/AndradasPortfolioSite/website-code<cr>

  "change dir to ~/Dropbox/dotfiles/ (think 'c'hange to 'd'otfile
  "directory)
    nnoremap <leader>cd :cd ~/Dropbox/dotfiles<cr>

  "change dir to ~/Projects/ishtvan/ishtvan-kinect (think 'c'hange to
  "'i'shtvan app
    nnoremap <leader>ci :cd ~/Projects/ishtvan/ishtvan-kinect<cr>

  "change dir to ~/Projects/Freelancing/mealapp (think 'c'hange to
  "'f'reelancing project
    nnoremap <leader>cf :cd ~/Projects/Freelancing/mealapp<cr>

  "insert a padding space on the inside of the selected () with <leader>
  "is
    nnoremap <leader>is vi(<Esc>a<Space><Esc>`<i<Space><Esc>h%
    vnoremap <leader>is <Esc>vi(<Esc>a<Space><Esc>`<i<Space><Esc>h%

  "delete a padding space on the inside of the selected ()
    nnoremap <leader>ds vi(<Esc>x`<xh%
    vnoremap <leader>ds <Esc>vi(<Esc>x`<xh%
    
  "Use Q to intelligently close a window 
    nnoremap <silent> Q :call CloseWindowOrKillBuffer()<CR>
    
  "Use <leader>p to toggle paste.  When paste is set, then pasting from
  "the system clipboard will have the right format
    nnoremap <leader>p :set paste!<cr>
    vnoremap <leader>p :set paste!<cr>

  "Operator for "in next ___" (___ can be (, ), {, }, [, ], ', or " )
    onoremap in( :<c-u>normal! f(vi(<cr>
    onoremap in) :<c-u>normal! f(vi(<cr>
    onoremap in{ :<c-u>normal! f{vi{<cr>
    onoremap in} :<c-u>normal! f{vi{<cr>
    onoremap in[ :<c-u>normal! f[vi[<cr>
    onoremap in] :<c-u>normal! f[vi[<cr>
    onoremap in' :<c-u>normal! f'lvi'<cr>
    onoremap in" :<c-u>normal! f"lvi"<cr>

  "in last ___
    onoremap il( :<c-u>normal! F)vi(<cr>
    onoremap il) :<c-u>normal! F)vi(<cr>
    onoremap il{ :<c-u>normal! F}vi{<cr>
    onoremap il} :<c-u>normal! F}vi{<cr>
    onoremap il[ :<c-u>normal! F]vi[<cr>
    onoremap il] :<c-u>normal! F]vi[<cr>
    onoremap il' :<c-u>normal! F'hvi'<cr>
    onoremap il" :<c-u>normal! F"hvi"<cr>

  "around next ___
    onoremap an( :<c-u>normal! f(va(<cr>
    onoremap an) :<c-u>normal! f(va(<cr>
    onoremap an{ :<c-u>normal! f{va{<cr>
    onoremap an} :<c-u>normal! f{va{<cr>
    onoremap an[ :<c-u>normal! f[va[<cr>
    onoremap an] :<c-u>normal! f[va[<cr>
    onoremap an] :<c-u>normal! f[va[<cr>
    onoremap an' :<c-u>normal! f'lva'<cr>
    onoremap an" :<c-u>normal! f"lva"<cr>

  "around last ___
    onoremap al( :<c-u>normal! F)va(<cr>
    onoremap al) :<c-u>normal! F)va(<cr>
    onoremap al{ :<c-u>normal! F}va{<cr>
    onoremap al} :<c-u>normal! F}va{<cr>
    onoremap al[ :<c-u>normal! F]va[<cr>
    onoremap al] :<c-u>normal! F]va[<cr>
    onoremap al' :<c-u>normal! F'hva'<cr>
    onoremap al" :<c-u>normal! F"hva"<cr>

    "alter snippets for current file type with [leader]as
    nnoremap <leader>as :UltiSnipsEdit<cr>

    "alter all snippets with [leader]aas
    nnoremap <leader>aas :tab new<cr>:NERDTree 
             \ ~/.vim/UltiSnips<cr>

"%%%%%%%%%%%%%%%%%%%%%%%%%    AUTOCOMMANDS    %%%%%%%%%%%%%%%%%%%%%%%%%%%%
  " PHP autocommands
    augroup filetype_php
      autocmd!
      "make the currently typed word into a variable with <C-v>
        autocmd FileType php inoremap <buffer> <C-v> <Esc>bi$<Esc>ea
        
      "insert $this with <C-t> (when in a PHP file)
        autocmd FileType php inoremap <buffer> <C-t> $this

      "open up php SnipMate snippets file (alter snippets)
        autocmd FileType php nnoremap <buffer> <leader>as :tab new<cr>:e ~/.vim/after/snippets/php.snippets<cr>

    augroup END


  " RUBY autocommands
    augroup filetype_ruby
      autocmd!
      "make the currently typed word into a variable with <C-v>
        autocmd FileType ruby inoremap <buffer> <C-v> #{}<Esc>i

      "make the currently typed word into an attribute (@ in front)
        autocmd FileType ruby inoremap <buffer> <C-b> <Esc>bi@<Esc>ea

      "make the currently typed word into a symbol (: in front)
        autocmd FileType ruby inoremap <buffer> <C-y> <Esc>bi:<Esc>ea
    augroup END


  " Filetype commands
    augroup filetypes
      autocmd!
        au FileType scss set ft=scss.css
    augroup END

  " Filetype indentations
    "4 space indentation, expandtab
    autocmd BufRead,BufNewFile *.brs,*.html set tabstop=4 | set softtabstop=4 | set shiftwidth=4

  " Use hard tab stops for make files
    autocmd FileType make set noexpandtab

  " Always set relative number lines when any file is opened
    autocmd BufRead,BufNewFile * set rnu

  " Automatically reload firefox when a front-end file is saved
    " autocmd BufWriteCmd *.html,*.css,*.scss,*.gtpl,*.js,*.coffee,*.coffee.erb :call Refresh_firefox()
    " function! Refresh_firefox()
    "   if &modified
    "     write
    "     silent !echo  'vimYo = content.window.pageYOffset;
    "           \ vimXo = content.window.pageXOffset;
    "           \ BrowserReload();
    "           \ content.window.scrollTo(vimXo,vimYo);
    "           \ repl.quit();'  |
    "           \ nc -w 1 localhost 4242 2>&1 > /dev/null
    "   endif
    " endfunction
